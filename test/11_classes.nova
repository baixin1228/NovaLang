# Test: Classes and Object-Oriented Programming

# Basic class definition
class Person:
    # Constructor
    def __init__(expr_ret, name, age):
        expr_ret.name = name
        expr_ret.age = age
    
    # Method
    def greet(expr_ret):
        print("Hello, my name is", expr_ret.name)
    
    # Method with parameters
    def celebrate_birthday(expr_ret):
        expr_ret.age += 1
        print(expr_ret.name, "is now", expr_ret.age, "years old")

# Create instances
person1 = Person("Alice", 30)
person2 = Person("Bob", 25)

# Access properties
print("Person 1:", person1.name, person1.age)
print("Person 2:", person2.name, person2.age)

# Call methods
person1.greet()
person2.greet()
person1.celebrate_birthday()

# Inheritance
class Student(Person):
    def __init__(expr_ret, name, age, student_id):
        super().__init__(name, age)
        expr_ret.student_id = student_id
    
    # Override method
    def greet(expr_ret):
        print("Hi, I'm", expr_ret.name, "and my student ID is", expr_ret.student_id)
    
    # Additional method
    def study(expr_ret, subject):
        print(expr_ret.name, "is studying", subject)

# Create student instance
student1 = Student("Charlie", 20, "S12345")
student1.greet()
student1.celebrate_birthday()  # Inherited method
student1.study("Computer Science")

# Class with properties
class Rectangle:
    def __init__(expr_ret, width, height):
        expr_ret.width = width
        expr_ret.height = height
    
    # Property (getter)
    #@property
    def area(expr_ret):
        return expr_ret.width * expr_ret.height
    
    # Method
    def resize(expr_ret, width, height):
        expr_ret.width = width
        expr_ret.height = height

rect = Rectangle(5, 3)
print("Rectangle: width =", rect.width, "height =", rect.height)
#print("Area:", rect.area)
rect.resize(10, 4)
#print("New area:", rect.area)

# Static methods
#class MathUtils:
#    @staticmethod
#    def add(x, y):
#        return x + y
#    
#    @staticmethod
#    def multiply(x, y):
#        return x * y

#print("5 + 3 =", MathUtils.add(5, 3))
#print("4 * 6 =", MathUtils.multiply(4, 6))

# Private attributes
class BankAccount:
    #def __init__(expr_ret, owner, balance=0):
    def __init__(expr_ret, owner, balance):
        expr_ret.owner = owner
        expr_ret.__balance = balance  # Private attribute
    
    def deposit(expr_ret, amount):
        if amount > 0:
            expr_ret.__balance += amount
            print("Deposited", amount)
            print("New balance:", expr_ret.__balance)
        else:
            print("Invalid deposit amount")
    
    def withdraw(expr_ret, amount):
        if 0 < amount <= expr_ret.__balance:
            expr_ret.__balance -= amount
            print("Withdrew", amount)
            print("New balance:", expr_ret.__balance)
        else:
            print("Invalid withdrawal amount")
    
    def get_balance(expr_ret):
        return expr_ret.__balance

account = BankAccount("David", 1000)
account.deposit(500)
account.withdraw(200)
print("Balance:", account.get_balance()) 