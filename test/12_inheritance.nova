# Test: Inheritance and Polymorphism

# Base class
class Animal:
    def __init__(expr_ret, name, species):
        expr_ret.name = name
        expr_ret.species = species
    
    def make_sound(expr_ret):
        print("Some generic animal sound")
    
    def describe(expr_ret):
        print(f"I am {expr_ret.name}, a {expr_ret.species}")

# Derived class 1
class Dog(Animal):
    def __init__(expr_ret, name, breed):
        super().__init__(name, "Dog")
        expr_ret.breed = breed
    
    def make_sound(expr_ret):
        print("Woof!")
    
    def fetch(expr_ret):
        print(f"{expr_ret.name} is fetching a ball!")

# Derived class 2
class Cat(Animal):
    def __init__(expr_ret, name, color):
        super().__init__(name, "Cat")
        expr_ret.color = color
    
    def make_sound(expr_ret):
        print("Meow!")
    
    def hunt(expr_ret):
        print(f"{expr_ret.name} is hunting mice!")

# Create instances
animal = Animal("Generic Animal", "Unknown")
dog = Dog("Buddy", "Golden Retriever")
cat = Cat("Whiskers", "Tabby")

# Base class methods
print("--- Base Animal ---")
animal.describe()
animal.make_sound()

# Dog methods
print("\n--- Dog ---")
dog.describe()
dog.make_sound()
dog.fetch()
print(f"Breed: {dog.breed}")

# Cat methods
print("\n--- Cat ---")
cat.describe()
cat.make_sound()
cat.hunt()
print(f"Color: {cat.color}")

# Polymorphism with a function
def animal_sounds(animals):
    for animal in animals:
        print(f"{animal.name}: ", end="")
        animal.make_sound()

print("\n--- Polymorphism ---")
animals = [animal, dog, cat]
animal_sounds(animals)

# Multiple inheritance
class Bird(Animal):
    def __init__(expr_ret, name, can_fly=True):
        super().__init__(name, "Bird")
        expr_ret.can_fly = can_fly
    
    def make_sound(expr_ret):
        print("Tweet!")
    
    def fly(expr_ret):
        if expr_ret.can_fly:
            print(f"{expr_ret.name} is flying high!")
        else:
            print(f"{expr_ret.name} cannot fly!")

class Pet:
    def __init__(expr_ret, owner):
        expr_ret.owner = owner
    
    def get_owner(expr_ret):
        print(f"Owner: {expr_ret.owner}")

# Multiple inheritance
class Parrot(Bird, Pet):
    def __init__(expr_ret, name, owner, vocabulary=None):
        Bird.__init__(expr_ret, name)
        Pet.__init__(expr_ret, owner)
        expr_ret.vocabulary = vocabulary or []
    
    def speak(expr_ret):
        if not expr_ret.vocabulary:
            print(f"{expr_ret.name} has nothing to say.")
        else:
            print(f"{expr_ret.name} says: {', '.join(expr_ret.vocabulary)}")
    
    def learn(expr_ret, word):
        expr_ret.vocabulary.append(word)
        print(f"{expr_ret.name} learned to say: {word}")

# Create a parrot
parrot = Parrot("Rio", "Emma", ["Hello", "Good morning"])
print("\n--- Multiple Inheritance (Parrot) ---")
parrot.describe()  # From Animal
parrot.make_sound()  # From Bird
parrot.fly()  # From Bird
parrot.get_owner()  # From Pet
parrot.speak()  # From Parrot
parrot.learn("Goodbye")
parrot.speak() 